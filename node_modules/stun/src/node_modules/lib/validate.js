'use strict';

const crypto = require('crypto');
const crc32 = require('turbo-crc32/crc32');
const constants = require('lib/constants');

const { FINGERPRINT, MESSAGE_INTEGRITY } = constants.attributeType;
const {
  kStunFingerprintXorValue,
  kStunFingerprintLength,
  kStunMessageIntegrityLength,
} = constants;

module.exports = {
  validateFingerprint,
  validateMessageIntegrity,
};

const toUInt32 = x => x >>> 0; // eslint-disable-line no-bitwise

/**
 * Verifies that a given buffer is STUN by checking for a correct FINGERPRINT.
 * @param {StunMessage} stunMessage
 * @returns {bool}
 */
function validateFingerprint(stunMessage) {
  if (stunMessage.isLegacy()) {
    return false;
  }

  const fingerprintAttr = stunMessage.getAttribute(FINGERPRINT);

  if (fingerprintAttr === undefined) {
    return false;
  }

  const crc32buf = stunMessage.toBuffer().slice(0, -kStunFingerprintLength);
  const currentCRC32 = fingerprintAttr.value;

  // eslint-disable-next-line no-bitwise
  return toUInt32(crc32(crc32buf) ^ kStunFingerprintXorValue) === currentCRC32;
}

/**
 * Validates that a raw STUN message has a correct MESSAGE-INTEGRITY value.
 * @param {StunMessage} stunMessage
 * @param {string} password
 * @returns {bool}
 */
function validateMessageIntegrity(stunMessage, password) {
  let offsetEnd = 0;

  const fingerprintAttr = stunMessage.getAttribute(FINGERPRINT);
  const msgIntegrityAttr = stunMessage.getAttribute(MESSAGE_INTEGRITY);

  const isFingerprintExist = fingerprintAttr !== undefined;

  // Calc offsets if FINGERPRINT attribute exist.
  if (isFingerprintExist) {
    offsetEnd += kStunFingerprintLength;
  }

  if (msgIntegrityAttr === undefined) {
    return false;
  }

  offsetEnd += kStunMessageIntegrityLength;

  const buf = stunMessage.toBuffer().slice(0, -offsetEnd);

  // Remove length of FINGERPRINT attribute from message size.
  if (isFingerprintExist) {
    const currentLength = buf.readUInt16BE(2);
    buf.writeUInt16BE(currentLength - kStunFingerprintLength, 2);
  }

  const hmac = crypto.createHmac('sha1', password);
  hmac.update(buf);

  return hmac.digest().equals(msgIntegrityAttr.value);
}
